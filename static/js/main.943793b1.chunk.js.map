{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","handler","document","createElement","music_index","post_msg","e","contentWindow","postMessage","sourceConnectorType","eventName","state","url","id","rank_url","rank_title","bind","get_ranking","Promise","resolve","setTimeout","axios","get","res","this","setState","data","title","window","addEventListener","playerStatus","ch_music","prevState","className","AppBar","position","Toolbar","Typography","variant","src","allowFullScreen","ref","TwitterShareButton","substr","TwitterIcon","size","round","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oUAuGeA,E,kDAzFX,WAAYC,GAAmB,IAAD,8BAC1B,cAAMA,IAMFC,QAA0BC,SAASC,cAAc,UAP3B,EAQtBC,YAAmB,EARG,EAmD9BC,SAAS,SAACC,GACN,GAAqB,OAAlBA,EAAEC,cACKD,EAAEC,cAAcC,YAAY,CAC9BC,oBAAoB,EACpBC,UAAW,QACb,+BAtDN,EAAKC,MAAM,CAACC,IAAI,GAAGC,GAAG,WAAWC,SAAS,GAAGC,WAAW,IACxD,EAAKC,OACL,EAAKC,cAJqB,E,mDAU1B,OAAO,IAAIC,SAAQ,SAAAC,GACfC,YAAW,cACR,U,oKAISC,IAAMC,IAAI,wE,OAApBC,E,OACNC,KAAKC,SAAS,CAACX,SAASS,EAAIG,KAAKd,IAAIG,WAAWQ,EAAIG,KAAKC,MAAMf,IAAIW,EAAIG,KAAKd,IAAI,K,mIAI5E,IAAD,OACHgB,OAAOC,iBAAiB,WAAU,SAACvB,GACN,sBAAlBA,EAAEoB,KAAKhB,WACuB,GAA1BJ,EAAEoB,KAAKA,KAAKI,eACX,EAAK1B,cACL,EAAKA,aAAa,IAClB,EAAK2B,WACLX,YAAW,WAAuB,OAAf,EAAKnB,SACpB,EAAKI,SAAS,EAAKJ,WACpB,W,iCAQZ,IAAD,OACNuB,KAAKC,UAAS,SAACO,GAAD,MAAc,CAACpB,IAAI,EAAKD,MAAMG,SAAS,EAAKV,mB,qCAI3B,MAA5BoB,KAAKvB,QAAQM,eACZiB,KAAKvB,QAAQM,cAAcC,YAAY,CACnCC,oBAAoB,EACpBC,UAAW,QACZ,gC,+BAYD,IAAD,OACL,OACI,yBAAKuB,UAAU,OACX,4BAAQA,UAAU,cACd,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,mHAOZ,4BAAQC,IAAKf,KAAKb,MAAMC,IAAKC,GAAG,aAAa2B,iBAAe,EAACC,IAAK,SAACnC,GAC/D,EAAKL,QAAUK,IADnB,SAIA,kBAAC+B,EAAA,EAAD,KACA,6BAAMb,KAAKpB,YAAc,EAAzB,4BACA,6BAAMoB,KAAKb,MAAMI,WAAWS,KAAKpB,eAEjC,kBAACsC,EAAA,EAAD,CAAoBf,MAAOH,KAAKb,MAAMI,WAAWS,KAAKpB,aAAa,KAAKoB,KAAKb,MAAMC,IAAI+B,OAAO,GAAG,IAAI,yCAAY/B,IAAK,mBAAmBY,KAAKb,MAAMC,IAAI+B,OAAO,GAAG,IAAI,kBAClK,kBAACC,EAAA,EAAD,CAAaC,KAAM,GAAIC,OAAK,U,GAlF9BC,IAAMC,WCDJC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrD,SAASsD,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.943793b1.chunk.js","sourcesContent":["import React from 'react';\nimport {AppBar, Button, Toolbar, Typography} from \"@material-ui/core\";\nimport axios from \"axios\"\nimport {TwitterShareButton,TwitterIcon} from \"react-share\";\ninterface Inico{\n    url:string;\n    id:string;\n    rank_url:string[];\n    rank_title:string[];\n}\ninterface Inico_prop {\n\n}\nclass App extends React.Component<Inico_prop,Inico>{\n    constructor(props:Inico_prop) {\n        super(props);\n        this.state={url:\"\",id:\"niconico\",rank_url:[],rank_title:[]}\n        this.bind();\n        this.get_ranking();\n\n    }\n    private handler:HTMLIFrameElement=document.createElement('iframe');\n    private music_index:number=0;\n    wait(): Promise<any> {\n        return new Promise(resolve => {\n            setTimeout(() => {\n            }, 2000);\n        })\n    }\n    async get_ranking(){\n        const res=await axios.get(\"https://niconico-vocaloid-ranking.herokuapp.com/ranking_api/?ranking\");\n        this.setState({rank_url:res.data.url,rank_title:res.data.title,url:res.data.url[0]});\n    }\n\n\n    bind() {\n        window.addEventListener('message',(e)=>{\n                if(e.data.eventName==\"playerStatusChange\"){\n                    if(e.data.data.playerStatus==4){\n                        this.music_index++;\n                        this.music_index%=100;\n                        this.ch_music();\n                        setTimeout(()=>{if(this.handler!==null) {\n                            this.post_msg(this.handler);\n                        }},2000);\n\n                    }\n                }\n\n        })\n\n    }\n    ch_music(){\n        this.setState((prevState)=>({url:this.state.rank_url[this.music_index]}));\n    }\n\n    renderPlayer(){\n        if(this.handler.contentWindow!=null) {\n            this.handler.contentWindow.postMessage({\n                sourceConnectorType:1,\n                eventName: 'play'\n            }, 'https://embed.nicovideo.jp')\n        }\n    }\n\n    post_msg=(e:HTMLIFrameElement)=>{\n        if(e.contentWindow!==null){\n            let x=e.contentWindow.postMessage({\n                sourceConnectorType:1,\n                eventName: 'play'\n            },'https://embed.nicovideo.jp');\n        }\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <AppBar position=\"static\">\n                        <Toolbar>\n                            <Typography variant=\"h6\">\n                                ボカロランキングを連続再生してみた！\n                            </Typography>\n                        </Toolbar>\n                    </AppBar>\n                </header>\n\n                <iframe src={this.state.url} id=\"nicoplayer\" allowFullScreen ref={(e: HTMLIFrameElement) => {\n                    this.handler = e\n                }}>hello\n                </iframe>\n                <Typography>\n                <div>{this.music_index + 1}位の楽曲</div>\n                <div>{this.state.rank_title[this.music_index]}</div>\n                </Typography>\n                <TwitterShareButton title={this.state.rank_title[this.music_index]+\" #\"+this.state.url.substr(33,10)+\" #ニコニコ動画\"} url={\"https://nico.ms/\"+this.state.url.substr(33,11)+'ref=twitter_ss'}>\n                    <TwitterIcon size={32} round />\n                </TwitterShareButton>\n            </div>\n\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}